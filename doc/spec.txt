Memory Format: little endian

Operation Type: stack machine

Addressing Modes:
direct: the value is part of the command
stack direct: an index into the stack relative to the current sp
memory direct: an index into the memory
stack indirect: the current byte on the stack is used as relative index into the stack
memory indirect: the current 4 bytes on the stack are used as index into memory 

VM Flags:
0 = Zero Flag
1 = Overflow Flag
2
3
4
5
6
7

Instruction Format:
0-3: instruction selector
4-7: sub instruction

Instructions:
alu: 0x01								parameters (stack)
	add	0x0								2 bytes
	sub	0x1								2 bytes
	mul	0x2								2 bytes
	div	0x3								2 bytes
	or	0x4								2 bytes
	not	0x5								1 byte
	and	0x6								2 bytes
	xor	0x7								2 bytes
	
load: 

	0x02				4567			parameters(inline)		parameters(stack)
	direct				0000	0x0		1 byte					0 bytes
	memory direct		1000	0x1		4 bytes (ptr)			0 bytes
	stack indirect		0100	0x2		0 bytes					1 byte
	memory indirect		1100	0x3		0 bytes					4 bytes (ptr)
	vm flags			0010	0x4		0 bytes					0 bytes
	

store:
	0x03				4567			parameters(inline)		parameters(stack)
	stack direct		0000	0x0		1 byte					0 bytes
	memory direct		1000	0x1		4 bytes (ptr)			0 bytes
	stack indirect		0100	0x2		0 bytes					1 byte
	memory indirect		1100	0x3		0 bytes					4 bytes (ptr)
	vm flags			0010	0x4		0 bytes					0 bytes
	

cmp: 0x04

jmp: 0x05
parameters(stack): always 4 bytes (ptr)

M = Mode	(0 = combined mode - the G and E conditions have to be true at the same time)
			(1 = independend mode - only the E condition is evaluated)
E = Equal
G = Greater
N = Not
						MEGN
						4567
						
	jmp					1000	0x1
		
	jmpz				1100	0x3
	jmpnz				1101	0xD
	
	jmpgt				0010	0x4
	jmpl				0011	0xC
	jmpgte				0110	0x6
	jmpleq				0100	0x2
	jmpnleq				0101	0xA

send: 0x06
mem: 0x07

